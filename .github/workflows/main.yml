name: Deploy
on:
  push:
    branches: [ "master", "tf-gha" ]
  pull_request:

permissions:
  id-token: write
  contents: read

jobs:
  build:
    name: Build
    runs-on: ubuntu-latest
    defaults:
      run:
        shell: bash
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with:
          node-version: 20
      - run: npm ci
      # - run: npm run test
      - run: npm run build
      - run: npm prune --omit=dev
      - uses: actions/upload-artifact@v4
        with:
          name: build-artifacts
          path: |
            lib
            node_modules
          if-no-files-found: error
  deploy:
    name: Deploy
    needs: build
    concurrency: server-deploy
    runs-on: ubuntu-latest
    environment: production
    defaults:
      run:
        shell: bash
    steps:
    - uses: actions/checkout@v4
    - uses: aws-actions/configure-aws-credentials@v4 # Requires the role to have a trust policy for GHA
      with:
        role-to-assume: arn:aws:iam::575737149124:role/forum-server-deploy
        aws-region: us-east-1
    - uses: hashicorp/setup-terraform@v3
      with:
        terraform_version: 1.9.2
    - name: Create ECR repository
      run: |
        terraform init
        terraform fmt -check
        terraform plan -target="module.ecr" -input=false -out=tfplan-ecr
        terraform apply -auto-approve -input=false tfplan-ecr
      working-directory: ./terraform
    - name: Terraform
      run: |
        terraform init
        terraform fmt -check
        terraform plan -input=false -out=tfplan
      working-directory: ./terraform
    - name: Terraform Apply
      if: github.ref == 'refs/heads/master' && github.event_name == 'push'
      run: terraform apply -auto-approve -input=false tfplan
      working-directory: ./terraform
    # - name: Login to Amazon ECR
    #   id: login-ecr
    #   uses: aws-actions/amazon-ecr-login@v2
    #   with:
    #     registries: 575737149124
    #     mask-password: "true"
    # - name: Populate build artifacts
    #   uses: actions/download-artifact@v4
    #   with:
    #     name: build-artifacts
    # - name: Build, tag, and push image to Amazon ECR
    #   id: build-publish
    #   shell: bash
    #   env:
    #     ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
    #     ECR_REPOSITORY: forum-server
    #     IMAGE_TAG: ${{github.sha}}
    #   run: |
    #     ls
    #     echo $ECR_REGISTRY
    #     echo $ECR_REPOSITORY
    #     echo $IMAGE_TAG
    #     docker build . -f Dockerfile -t "$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG"
    #     docker push "$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG"
    #     echo "IMAGE $IMAGE_TAG is pushed to $ECR_REGISTRY/$ECR_REPOSITORY"
    #     echo "image_tag=$IMAGE_TAG" 
    #     echo "full_image=$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG"
